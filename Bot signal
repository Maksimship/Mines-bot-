<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>1win Mines</title>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif;
            margin: 0;
            padding: 16px;
            background: var(--tg-theme-bg-color, #1a1a1a);
            color: var(--tg-theme-text-color, #ffffff);
        }

        .container {
            max-width: 500px;
            margin: 0 auto;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .balance {
            font-size: 18px;
            font-weight: bold;
        }

        .bet-controls {
            background: rgba(255, 255, 255, 0.1);
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
        }

        .bet-input {
            width: 100%;
            padding: 10px;
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 5px;
            color: #fff;
            font-size: 16px;
            margin-bottom: 10px;
        }

        .mines-selector {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }

        .mines-btn {
            padding: 8px 15px;
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 5px;
            color: #fff;
            cursor: pointer;
        }

        .mines-btn.active {
            background: #3390ec;
        }

        .game-grid {
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            gap: 8px;
            margin-bottom: 20px;
        }

        .cell {
            aspect-ratio: 1;
            border: none;
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.05);
            color: #fff;
            font-size: 24px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .cell:hover {
            background: rgba(255, 255, 255, 0.1);
        }

        .cell.revealed {
            background: #44ff44;
        }

        .cell.mine {
            background: #ff4444;
        }

        .stats {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            font-size: 16px;
        }

        .control-buttons {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
        }

        .btn {
            padding: 15px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-play {
            background: #3390ec;
            color: #fff;
        }

        .btn-cashout {
            background: #44ff44;
            color: #000;
        }

        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="balance">–ë–∞–ª–∞–Ω—Å: <span id="balance">1000.00</span>‚ÇΩ</div>
        </div>

        <div class="bet-controls">
            <input type="number" class="bet-input" id="betAmount" value="100" min="1" max="1000" placeholder="–°—Ç–∞–≤–∫–∞">
            <div class="mines-selector">
                <button class="mines-btn" data-mines="3">3</button>
                <button class="mines-btn active" data-mines="5">5</button>
                <button class="mines-btn" data-mines="10">10</button>
                <button class="mines-btn" data-mines="24">24</button>
            </div>
        </div>

        <div class="stats">
            <div>–ú–Ω–æ–∂–∏—Ç–µ–ª—å: <span id="multiplier">x1.00</span></div>
            <div>–í—ã–∏–≥—Ä—ã—à: <span id="profit">0.00</span>‚ÇΩ</div>
        </div>

        <div class="game-grid" id="gameGrid"></div>

        <div class="control-buttons">
            <button class="btn btn-play" id="playButton">–ò–≥—Ä–∞—Ç—å</button>
            <button class="btn btn-cashout" id="cashoutButton" disabled>–ó–∞–±—Ä–∞—Ç—å</button>
        </div>
    </div>

    <script>
        let tg = window.Telegram.WebApp;
        tg.expand();

        const gameState = {
            balance: 1000,
            betAmount: 100,
            minesCount: 5,
            multiplier: 1,
            mines: new Set(),
            openedCells: new Set(),
            isGameActive: false
        };

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
        function createGrid() {
            const grid = document.getElementById('gameGrid');
            grid.innerHTML = '';
            for(let i = 0; i < 25; i++) {
                const cell = document.createElement('button');
                cell.className = 'cell';
                cell.dataset.position = i;
                cell.addEventListener('click', () => handleCellClick(i));
                grid.appendChild(cell);
            }
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∏–Ω
        function generateMines() {
            gameState.mines.clear();
            while(gameState.mines.size < gameState.minesCount) {
                const position = Math.floor(Math.random() * 25);
                gameState.mines.add(position);
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —è—á–µ–π–∫–µ
        function handleCellClick(position) {
            if(!gameState.isGameActive || gameState.openedCells.has(position)) return;

            const cell = document.querySelector(`[data-position="${position}"]`);
            
            if(gameState.mines.has(position)) {
                // –ü–æ–ø–∞–ª–∏ –Ω–∞ –º–∏–Ω—É
                cell.textContent = 'üí•';
                cell.className = 'cell mine';
                gameOver(false);
            } else {
                // –û—Ç–∫—Ä—ã–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω—É—é —è—á–µ–π–∫—É
                cell.textContent = 'üíé';
                cell.className = 'cell revealed';
                gameState.openedCells.add(position);
                updateMultiplier();
            }
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è
        function updateMultiplier() {
            const openCount = gameState.openedCells.size;
            const totalSafe = 25 - gameState.minesCount;
            gameState.multiplier = calculateMultiplier(openCount, gameState.minesCount);
            
            document.getElementById('multiplier').textContent = `x${gameState.multiplier.toFixed(2)}`;
            document.getElementById('profit').textContent = 
                (gameState.betAmount * gameState.multiplier).toFixed(2);
        }

        // –†–∞—Å—á–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—è
        function calculateMultiplier(opened, mines) {
            const base = 0.97; // 97% –≤–æ–∑–≤—Ä–∞—Ç
            const coefficient = (25 / (25 - mines));
            return Math.pow(coefficient, opened) * base;
        }

        // –û–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã
        function gameOver(won) {
            gameState.isGameActive = false;
            document.getElementById('playButton').disabled = false;
            document.getElementById('cashoutButton').disabled = true;

            if(!won) {
                revealAllMines();
                gameState.balance -= gameState.betAmount;
            } else {
                gameState.balance += gameState.betAmount * gameState.multiplier - gameState.betAmount;
            }
            
            document.getElementById('balance').textContent = gameState.balance.toFixed(2);
        }

        // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–∏–Ω—ã
        function revealAllMines() {
            gameState.mines.forEach(position => {
                const cell = document.querySelector(`[data-position="${position}"]`);
                cell.textContent = 'üí•';
                cell.className = 'cell mine';
            });
        }

        // –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
        document.getElementById('playButton').addEventListener('click', () => {
            if(gameState.isGameActive) return;

            gameState.betAmount = parseFloat(document.getElementById('betAmount').value);
            if(gameState.betAmount > gameState.balance) {
                tg.showAlert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!');
                return;
            }

            gameState.isGameActive = true;
            gameState.openedCells.clear();
            gameState.multiplier = 1;
            generateMines();
            createGrid();
            
            document.getElementById('multiplier').textContent = 'x1.00';
            document.getElementById('profit').textContent = '0.00';
            document.getElementById('playButton').disabled = true;
            document.getElementById('cashoutButton').disabled = false;
        });

        // –ó–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à
        document.getElementById('cashoutButton').addEventListener('click', () => {
            if(!gameState.isGameActive || gameState.openedCells.size === 0) return;
            gameOver(true);
            tg.showAlert(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã–∏–≥—Ä—ã—à: ${(gameState.betAmount * gameState.multiplier).toFixed(2)}‚ÇΩ`);
        });

        // –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω
        document.querySelectorAll('.mines-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                if(gameState.isGameActive) return;
                document.querySelector('.mines-btn.active').classList.remove('active');
                btn.classList.add('active');
                gameState.minesCount = parseInt(btn.dataset.mines);
            });
        });

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
        createGrid();
    </script>
</body>
</html> 
